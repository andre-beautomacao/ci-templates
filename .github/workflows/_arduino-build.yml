name: Reusable • Arduino Build

on:
  workflow_call:
    inputs:
      fqbn_json:
        description: "JSON com FQBNs. Ex.: [\"esp32:esp32:esp32\",\"esp8266:esp8266:nodemcuv2\"]"
        required: true
        type: string
      sketches_glob:
        description: "Globs para achar .ino (separe por vírgula)"
        required: false
        type: string
        default: "*.ino"
      esp32_core_version:
        description: "Versão do core ESP32; vazio para não instalar"
        required: false
        type: string
        default: "3.3.2"
      esp8266_core_version:
        description: "Versão do core ESP8266; vazio para não instalar"
        required: false
        type: string
        default: "3.1.2"
      arduino_libs:
        description: "Bibliotecas (uma por linha; opcionalmente @versão)"
        required: false
        type: string
        default: ""
      extra_build_flags:
        description: "Flags do compilador (ex.: -DDEBUG=1)"
        required: false
        type: string
        default: ""
      board_options:
        description: "Opções extras de board (menus), ex.: PartitionScheme=min_spiffs"
        required: false
        type: string
        default: ""
      upload_artifacts:
        description: "Publicar artefatos do build (bin/elf)"
        required: false
        type: boolean
        default: true

jobs:
  prep:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.export-matrix.outputs.matrix }}
      sketches: ${{ steps.list-sketches.outputs.sketches }}
    env:
      SKETCHES_GLOB: ${{ inputs.sketches_glob }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup arduino-cli
        uses: arduino/setup-arduino-cli@v2

      - name: Paths de cache
        id: paths
        run: |
          echo "arduino15=$HOME/.arduino15" >> $GITHUB_OUTPUT
          echo "arduino_cache=$HOME/.cache/arduino" >> $GITHUB_OUTPUT

      - name: Cache • Cores+Índices+Libs
        uses: actions/cache@v4
        with:
          path: |
            ${{ steps.paths.outputs.arduino15 }}
            ${{ steps.paths.outputs.arduino_cache }}
          key: arduino-${{ runner.os }}-${{ hashFiles('**/library.properties', '**/libraries.txt', '.github/arduino-libs.txt') }}
          restore-keys: |
            arduino-${{ runner.os }}-

      - name: Atualizar index e instalar cores pinadas
        run: |
          arduino-cli core update-index
          if [ -n "${{ inputs.esp32_core_version }}" ]; then
            arduino-cli core install "esp32:esp32@${{ inputs.esp32_core_version }}"
          fi
          if [ -n "${{ inputs.esp8266_core_version }}" ]; then
            arduino-cli core install "esp8266:esp8266@${{ inputs.esp8266_core_version }}"
          fi

      - name: Instalar bibliotecas (se houver)
        if: ${{ inputs.arduino_libs != '' }}
        shell: bash
        run: |
          echo "${{ inputs.arduino_libs }}" | while IFS= read -r lib; do
            [ -z "$lib" ] && continue
            echo "Instalando: $lib"
            if ! arduino-cli lib install "$lib"; then
              echo "⚠️ '$lib' não encontrada no Library Manager. Tentando via GitHub..."
              case "$lib" in
                AsyncMqttClient)
                  git clone --depth 1 https://github.com/marvinroger/async-mqtt-client.g
