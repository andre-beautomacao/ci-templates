name: Reusable • Arduino Build

on:
  workflow_call:
    inputs:
      fqbn_json:
        description: "JSON com FQBNs. Ex.: [\"esp32:esp32:esp32\",\"esp8266:esp8266:nodemcuv2\"]"
        required: true
        type: string
      sketches_glob:
        description: "Globs para achar .ino (separe por vírgula)"
        required: false
        type: string
        default: "*.ino"
      esp32_core_version:
        description: "Versão do core ESP32; vazio para não instalar"
        required: false
        type: string
        default: "3.3.2"
      esp8266_core_version:
        description: "Versão do core ESP8266; vazio para não instalar"
        required: false
        type: string
        default: "3.1.2"
      arduino_libs:
        description: "Bibliotecas (uma por linha; opcionalmente @versão)"
        required: false
        type: string
        default: ""
      extra_build_flags:
        description: "Flags do compilador (ex.: -DDEBUG=1)"
        required: false
        type: string
        default: ""
      board_options:
        description: "Opções extras de board (menus), ex.: PartitionScheme=min_spiffs"
        required: false
        type: string
        default: ""
      upload_artifacts:
        description: "Publicar artefatos do build (bin/elf)"
        required: false
        type: boolean
        default: true

jobs:
  prep:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.export-matrix.outputs.matrix }}
      sketches: ${{ steps.list-sketches.outputs.sketches }}
    env:
      SKETCHES_GLOB: ${{ inputs.sketches_glob }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup arduino-cli (com Board Manager URLs)
        uses: arduino/setup-arduino-cli@v2
        with:
          additional-urls: |
            https://espressif.github.io/arduino-esp32/package_esp32_index.json
            https://arduino.esp8266.com/stable/package_esp8266com_index.json

      - name: Paths de cache
        id: paths
        run: |
          echo "arduino15=$HOME/.arduino15" >> $GITHUB_OUTPUT
          echo "arduino_cache=$HOME/.cache/arduino" >> $GITHUB_OUTPUT

      - name: Cache • Cores+Índices+Libs
        uses: actions/cache@v4
        with:
          path: |
            ${{ steps.paths.outputs.arduino15 }}
            ${{ steps.paths.outputs.arduino_cache }}
          key: arduino-${{ runner.os }}-${{ hashFiles('**/library.properties', '**/libraries.txt', '.github/arduino-libs.txt') }}
          restore-keys: |
            arduino-${{ runner.os }}-

      - name: Atualizar index e instalar cores (auto)
        shell: bash
        run: |
          set -euo pipefail
          arduino-cli core update-index

          FQBN_JSON='${{ inputs.fqbn_json }}'

          # ESP32: pinado ou latest por FQBN
          if [ -n "${{ inputs.esp32_core_version }}" ]; then
            echo "Instalando esp32:esp32@${{ inputs.esp32_core_version }}..."
            arduino-cli core install "esp32:esp32@${{ inputs.esp32_core_version }}"
          elif echo "$FQBN_JSON" | grep -qi 'esp32:esp32'; then
            echo "Instalando esp32:esp32 (latest) por detecção do FQBN..."
            arduino-cli core install esp32:esp32
          fi

          # ESP8266: pinado ou latest por FQBN
          if [ -n "${{ inputs.esp8266_core_version }}" ]; then
            echo "Instalando esp8266:esp8266@${{ inputs.esp8266_core_version }}..."
            arduino-cli core install "esp8266:esp8266@${{ inputs.esp8266_core_version }}"
          elif echo "$FQBN_JSON" | grep -qi 'esp8266:esp8266'; then
            echo "Instalando esp8266:esp8266 (latest) por detecção do FQBN..."
            arduino-cli core install esp8266:esp8266
          fi

          echo "=== Cores instalados ==="
          arduino-cli core list

      - name: Instalar bibliotecas (se houver)
        if: ${{ inputs.arduino_libs != '' }}
        shell: bash
        run: |
          echo "${{ inputs.arduino_libs }}" | while IFS= read -r lib; do
            [ -z "$lib" ] && continue
            echo "Instalando: $lib"
            if ! arduino-cli lib install "$lib"; then
              echo "⚠️ '$lib' não encontrada no Library Manager. Tentando via GitHub..."
              case "$lib" in
                AsyncMqttClient)
                  git clone --depth 1 https://github.com/marvinroger/async-mqtt-client.git /tmp/AsyncMqttClient
                  mkdir -p ~/Arduino/libraries && cp -r /tmp/AsyncMqttClient ~/Arduino/libraries/
                  ;;
                ESPAsyncWebServer)
                  git clone --depth 1 https://github.com/me-no-dev/ESPAsyncWebServer.git /tmp/ESPAsyncWebServer
                  mkdir -p ~/Arduino/libraries && cp -r /tmp/ESPAsyncWebServer ~/Arduino/libraries/
                  ;;
                ESPAsyncTCP)
                  git clone --depth 1 https://github.com/me-no-dev/ESPAsyncTCP.git /tmp/ESPAsyncTCP
                  mkdir -p ~/Arduino/libraries && cp -r /tmp/ESPAsyncTCP ~/Arduino/libraries/
                  ;;
                *)
                  echo "Sem fallback configurado para '$lib'."
                  ;;
              esac
            fi
          done

      - name: Listar sketches (.ino)
        id: list-sketches
        shell: bash
        run: |
          IFS=',' read -ra GLOBS <<< "${SKETCHES_GLOB}"
          files=()
          for g in "${GLOBS[@]}"; do
            pat="${g//\*\*\//}"
            pat="${pat// /}"
            while IFS= read -r -d '' f; do files+=("${f#./}"); done < <(find . -path "./.git" -prune -o -type f -iname "$pat" -print0)
          done
          if [ ${#files[@]} -eq 0 ]; then
            echo "Nenhum .ino encontrado pelos globs: ${SKETCHES_GLOB}"
            exit 1
          fi
          printf '%s\n' "${files[@]}" | sort -u | paste -sd ',' - | tee /tmp/sketches.txt
          echo "sketches=$(cat /tmp/sketches.txt)" >> $GITHUB_OUTPUT

      - name: Montar matriz (sketch × FQBN)
        id: mk-matrix
        shell: python3 {0}
        run: |
          import os, json
          sketches = os.environ.get("SKETCHES", "").split(",")
          if not sketches or sketches == [""]:
              sketches = open("/tmp/sketches.txt").read().strip().split(",")
          fqbn = json.loads("""${{ inputs.fqbn_json }}""")
          mat = [{"sketch": s, "fqbn": b} for s in sketches for b in fqbn]
          with open("/tmp/matrix.json", "w") as f:
              json.dump({"include": mat}, f)

      - name: Exportar matriz
        id: export-matrix
        run: |
          MATRIX_JSON=$(tr -d '\n' < /tmp/matrix.json)
          echo "matrix=$MATRIX_JSON" >> $GITHUB_OUTPUT

  build:
    needs: prep
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prep.outputs.matrix) }}

    env:
      EXTRA_BUILD_FLAGS: ${{ inputs.extra_build_flags }}
      BOARD_OPTIONS: ${{ inputs.board_options }}

    steps:
      - uses: actions/checkout@v4
      - uses: arduino/setup-arduino-cli@v2
        with:
          additional-urls: |
            https://espressif.github.io/arduino-esp32/package_esp32_index.json
            https://arduino.esp8266.com/stable/package_esp8266com_index.json

      - name: Echo alvo
        run: |
          echo "Sketch: ${{ matrix.sketch }}"
          echo "FQBN:   ${{ matrix.fqbn }}"
          echo "Flags:  ${EXTRA_BUILD_FLAGS}"
          echo "Opts:   ${BOARD_OPTIONS}"

      - name: Compilar
        shell: bash
        run: |
          SKETCH_DIR="$(dirname "${{ matrix.sketch }}")"

          # Constrói lista de --build-property a partir de board_options (ex.: "build.partitions=min_spiffs,FlashMode=qio")
          BP=""
          if [ -n "$BOARD_OPTIONS" ]; then
            IFS=',' read -ra OPTS <<< "$BOARD_OPTIONS"
            for kv in "${OPTS[@]}"; do
              kv="$(echo "$kv" | xargs)"
              [ -z "$kv" ] && continue
              BP+=" --build-property ${kv}"
            done
          fi

          # Se for ESP32 e usuário não passou nada, aplica min_spiffs por padrão
          if echo "${{ matrix.fqbn }}" | grep -qi '^esp32:esp32:' && [[ "$BOARD_OPTIONS" == "" ]]; then
            BP+=" --build-property build.partitions=min_spiffs"
            echo "Usando padrão ESP32: build.partitions=min_spiffs"
          fi

          arduino-cli compile \
            --fqbn "${{ matrix.fqbn }}" \
            --build-property compiler.cpp.extra_flags="${EXTRA_BUILD_FLAGS}" \
            $BP \
            --export-binaries \
            "$SKETCH_DIR"


      - name: Copiar binário principal para ./firmware/firmware.bin
        shell: bash
        run: |
          ROOT_DIR="$(dirname "${{ matrix.sketch }}")"
          BUILD_DIR="${ROOT_DIR}/build"
          TARGET_NAME="$(basename "${{ matrix.sketch }}" .ino)"
          BIN_ORIG="$(find "$BUILD_DIR" -maxdepth 2 -type f -name "${TARGET_NAME}.ino.bin" | head -n 1)"
          DEST_DIR="${ROOT_DIR}/firmware"
          DEST_BIN="${DEST_DIR}/firmware.bin"

          echo "Procurando: ${TARGET_NAME}.ino.bin em $BUILD_DIR"
          mkdir -p "$DEST_DIR"
          if [ -n "$BIN_ORIG" ] && [ -f "$BIN_ORIG" ]; then
            cp "$BIN_ORIG" "$DEST_BIN"
            echo "✅ Copiado para: $DEST_BIN"
          else
            echo "❌ Binário principal não encontrado."
            echo "Arquivos .bin existentes:"
            find "$BUILD_DIR" -maxdepth 2 -type f -name "*.bin" || true
            exit 1
          fi

      - name: Artefatos
        if: ${{ inputs.upload_artifacts }}
        uses: actions/upload-artifact@v4
        with:
          name: fw-${{ matrix.fqbn }}-$(basename ${{ matrix.sketch }} .ino)
          path: |
            $(dirname ${{ matrix.sketch }})/firmware/firmware.bin
            $(dirname ${{ matrix.sketch }})/build/*/*.elf
          if-no-files-found: warn
