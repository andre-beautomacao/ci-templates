name: Reusable • Arduino Build (single job)

on:
  workflow_call:
    inputs:
      fqbn_json:
        description: 'JSON com FQBN(s). Ex.: ["esp32:esp32:esp32"] (usaremos o 1º)'
        required: true
        type: string
      sketches_glob:
        description: 'Globs para achar .ino (separe por vírgula). Default: "*.ino"'
        required: false
        type: string
        default: "*.ino"
      esp32_core_version:
        description: "Versão do core ESP32; vazio para latest"
        required: false
        type: string
        default: "3.3.2"
      esp8266_core_version:
        description: "Versão do core ESP8266; vazio para latest"
        required: false
        type: string
        default: "3.1.2"
      arduino_libs:
        description: "Bibliotecas (uma por linha; pode usar @versão)"
        required: false
        type: string
        default: ""
      extra_build_flags:
        description: "Flags do compilador (ex.: -DDEBUG=1)"
        required: false
        type: string
        default: ""
      board_options:
        description: 'Opções do board (ex.: "build.partitions=min_spiffs")'
        required: false
        type: string
        default: ""
      upload_artifacts:
        description: "Publicar artefatos (firmware.bin, .elf)"
        required: false
        type: boolean
        default: true

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      SKETCHES_GLOB: ${{ inputs.sketches_glob }}
      EXTRA_BUILD_FLAGS: ${{ inputs.extra_build_flags }}
      BOARD_OPTIONS: ${{ inputs.board_options }}

    steps:
      - uses: actions/checkout@v4
      - uses: arduino/setup-arduino-cli@v2

      - name: Configurar Board Manager URLs
        run: |
          set -euo pipefail
          arduino-cli config init
          arduino-cli config delete board_manager.additional_urls || true
          arduino-cli config add board_manager.additional_urls https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json
          arduino-cli config add board_manager.additional_urls https://arduino.esp8266.com/stable/package_esp8266com_index.json
          arduino-cli config dump
          arduino-cli core update-index

      - name: Escolher FQBN (1º do JSON)
        id: fqbn
        shell: python3 {0}
        run: |
          import json, os
          data = json.loads("""${{ inputs.fqbn_json }}""")
          if not isinstance(data, list) or not data:
            raise SystemExit("fqbn_json precisa ser uma lista não-vazia")
          fqbn = data[0]
          print(f"FQBN selecionado: {fqbn}")
          open("/tmp/fqbn.txt","w").write(fqbn)

      - name: Instalar core do FQBN
        run: |
          set -euo pipefail
          FQBN="$(cat /tmp/fqbn.txt)"
          arduino-cli core update-index
          case "$FQBN" in
            esp32:esp32:*)
              if [ -n "${{ inputs.esp32_core_version }}" ]; then
                arduino-cli core install "esp32:esp32@${{ inputs.esp32_core_version }}"
              else
                arduino-cli core install esp32:esp32
              fi
              ;;
            esp8266:esp8266:*)
              if [ -n "${{ inputs.esp8266_core_version }}" ]; then
                arduino-cli core install "esp8266:esp8266@${{ inputs.esp8266_core_version }}"
              else
                arduino-cli core install esp8266:esp8266
              fi
              ;;
            *)
              echo "FQBN desconhecido: $FQBN"; exit 1
              ;;
          esac
          echo "=== Cores instalados ==="
          arduino-cli core list

      - name: Instalar bibliotecas (se houver)
        if: ${{ inputs.arduino_libs != '' }}
        shell: bash
        run: |
          set -euo pipefail
          echo "${{ inputs.arduino_libs }}" | while IFS= read -r lib; do
            lib="$(echo "$lib" | xargs)"; [ -z "$lib" ] && continue
            echo "Instalando: $lib"
            install_ok=false

            # 1) tenta como veio
            if arduino-cli lib install "$lib"; then
              install_ok=true
            else
              echo "⚠️ '$lib' não encontrada. Tentando variações…"
              # 2) alias específico LiquidCrystal_I2C -> LiquidCrystal I2C
              if [[ "$lib" =~ ^LiquidCrystal_I2C(@.*)?$ ]]; then
                alt="${lib/_/ }"
                echo "→ tentando '$alt'"
                arduino-cli lib install "$alt" && install_ok=true
              fi
              # 3) genérico: trocar "_" por espaço
              if [ "$install_ok" = false ]; then
                generic="$(echo "$lib" | sed 's/_/ /g')"
                if [ "$generic" != "$lib" ]; then
                  echo "→ tentando '$generic'"
                  arduino-cli lib install "$generic" && install_ok=true
                fi
              fi
              # 4) fallbacks via GitHub (async*)
              if [ "$install_ok" = false ]; then
                case "$lib" in
                  AsyncMqttClient*)
                    git clone --depth 1 https://github.com/marvinroger/async-mqtt-client.git /tmp/AsyncMqttClient
                    mkdir -p ~/Arduino/libraries && cp -r /tmp/AsyncMqttClient ~/Arduino/libraries/
                    install_ok=true
                    ;;
                  ESPAsyncWebServer*)
                    git clone --depth 1 https://github.com/ESP32Async/ESPAsyncWebServer.git /tmp/ESPAsyncWebServer
                    mkdir -p ~/Arduino/libraries && cp -r /tmp/ESPAsyncWebServer ~/Arduino/libraries/
                    install_ok=true
                    ;;
                  ESPAsyncTCP*|AsyncTCP*)
                    git clone --depth 1 https://github.com/me-no-dev/ESPAsyncTCP.git /tmp/ESPAsyncTCP || true
                    git clone --depth 1 https://github.com/me-no-dev/AsyncTCP.git   /tmp/AsyncTCP   || true
                    mkdir -p ~/Arduino/libraries
                    [ -d /tmp/ESPAsyncTCP ] && cp -r /tmp/ESPAsyncTCP ~/Arduino/libraries/
                    [ -d /tmp/AsyncTCP ]   && cp -r /tmp/AsyncTCP   ~/Arduino/libraries/
                    install_ok=true
                    ;;
                esac
              fi
            fi

            if [ "$install_ok" = true ]; then
              echo "✅ OK: $lib"
            else
              echo "❌ Não foi possível instalar '$lib'."
              exit 1
            fi
          done

      - name: Localizar sketch (.ino)
        id: find-sketch
        shell: bash
        run: |
          set -euo pipefail
          IFS=',' read -ra GLOBS <<< "${SKETCHES_GLOB}"
          files=()
          for g in "${GLOBS[@]}"; do
            pat="${g//\*\*\//}"; pat="${pat// /}"
            while IFS= read -r -d '' f; do files+=("${f#./}"); done < <(find . -path "./.git" -prune -o -type f -iname "$pat" -print0)
          done
          if [ ${#files[@]} -eq 0 ]; then
            echo "Nenhum .ino encontrado pelos globs: ${SKETCHES_GLOB}"; exit 1
          fi
          # usa o primeiro encontrado (padrão: um sketch por repositório)
          echo "SKETCH=${files[0]}" >> $GITHUB_OUTPUT
          echo "Sketch selecionado: ${files[0]}"

      - name: Compilar
        shell: bash
        run: |
          set -euo pipefail
          FQBN="$(cat /tmp/fqbn.txt)"
          SKETCH="${{ steps.find-sketch.outputs.SKETCH }}"
          SKETCH_DIR="$(dirname "$SKETCH")"

          BP=""
          if [ -n "$BOARD_OPTIONS" ]; then
            IFS=',' read -ra OPTS <<< "$BOARD_OPTIONS"
            for kv in "${OPTS[@]}"; do
              kv="$(echo "$kv" | xargs)"; [ -z "$kv" ] && continue
              BP+=" --build-property ${kv}"
            done
          fi
          if echo "$FQBN" | grep -qi '^esp32:esp32:' && [ -z "$BOARD_OPTIONS" ]; then
            BP+=" --build-property build.partitions=min_spiffs"
            echo "Usando padrão ESP32: build.partitions=min_spiffs"
          fi

          echo "Compilando: $SKETCH (FQBN=$FQBN)"
          arduino-cli compile \
            --fqbn "$FQBN" \
            --build-property compiler.cpp.extra_flags="${EXTRA_BUILD_FLAGS}" \
            $BP \
            --export-binaries \
            "$SKETCH_DIR"

      - name: Copiar binário principal para ./firmware/firmware.bin
        shell: bash
        run: |
          set -euo pipefail
          SKETCH="${{ steps.find-sketch.outputs.SKETCH }}"
          ROOT_DIR="$(dirname "$SKETCH")"
          BUILD_DIR="${ROOT_DIR}/build"
          TARGET_NAME="$(basename "$SKETCH" .ino)"
          BIN_ORIG="$(find "$BUILD_DIR" -maxdepth 3 -type f -name "${TARGET_NAME}.ino.bin" | head -n 1)"
          DEST_DIR="${ROOT_DIR}/firmware"
          mkdir -p "$DEST_DIR"
          if [ -n "$BIN_ORIG" ] && [ -f "$BIN_ORIG" ]; then
            cp "$BIN_ORIG" "$DEST_DIR/firmware.bin"
            echo "✅ Copiado para: $DEST_DIR/firmware.bin"
          else
            echo "❌ Binário principal não encontrado."
            echo "Arquivos .bin existentes:"; find "$BUILD_DIR" -maxdepth 3 -type f -name "*.bin" || true
            exit 1
          fi

      - name: Artefatos
        if: ${{ inputs.upload_artifacts }}
        uses: actions/upload-artifact@v4
        with:
          name: firmware
          path: |
            **/firmware/firmware.bin
            **/build/*/*.elf
          if-no-files-found: warn
