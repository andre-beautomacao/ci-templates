name: Reusable • Arduino Build

on:
  workflow_call:
    inputs:
      # JSON array com FQBNs. Ex: ["esp32:esp32:esp32","esp8266:esp8266:nodemcuv2"]
      fqbn_json:
        required: true
        type: string
      # Glob (ou vários separados por vírgula) para localizar .ino
      sketches_glob:
        required: false
        type: string
        default: "**/*.ino"
      # Versões dos cores (pinadas) — passe "" para latest (não recomendado)
      esp32_core_version:
        required: false
        type: string
        default: "2.0.17"
      esp8266_core_version:
        required: false
        type: string
        default: "3.1.2"
      # Lista de libs a instalar (nomes exatos do Library Manager); linhas separadas por \n
      arduino_libs:
        required: false
        type: string
        default: ""
      # Argumentos extra do compile (ex: "-DDEBUG=1")
      extra_build_flags:
        required: false
        type: string
        default: ""
    secrets: {}

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      SKETCHES_GLOB: ${{ inputs.sketches_glob }}
      EXTRA_BUILD_FLAGS: ${{ inputs.extra_build_flags }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Instalar arduino-cli
        uses: arduino/setup-arduino-cli@v2

      - name: Versão do arduino-cli
        run: arduino-cli version

      - name: Diretorios de cache
        id: paths
        run: |
          echo "arduino15=$HOME/.arduino15" >> $GITHUB_OUTPUT
          echo "arduino_cache=$HOME/.cache/arduino" >> $GITHUB_OUTPUT

      - name: Cache • Cores e Índices
        uses: actions/cache@v4
        with:
          path: |
            ${{ steps.paths.outputs.arduino15 }}
            ${{ steps.paths.outputs.arduino_cache }}
          key: arduino-${{ runner.os }}-${{ hashFiles('**/library.properties', '**/libraries.txt', '.github/arduino-libs.txt') }}
          restore-keys: |
            arduino-${{ runner.os }}-

      - name: Configurar indexes dos vendors
        run: |
          arduino-cli core update-index
          # Index oficiais já cobrem esp32 e esp8266

      - name: Instalar cores (ESP32/ESP8266) com versão pinada
        run: |
          ESP32_VER="${{ inputs.esp32_core_version }}"
          ESP8266_VER="${{ inputs.esp8266_core_version }}"
          if [ -n "$ESP32_VER" ]; then
            arduino-cli core install "esp32:esp32@${ESP32_VER}"
          else
            arduino-cli core install "esp32:esp32"
          fi
          if [ -n "$ESP8266_VER" ]; then
            arduino-cli core install "esp8266:esp8266@${ESP8266_VER}"
          else
            arduino-cli core install "esp8266:esp8266"
          fi

      - name: Instalar bibliotecas (se houver)
        if: ${{ inputs.arduino_libs != '' }}
        run: |
          echo "${{ inputs.arduino_libs }}" | while IFS= read -r lib; do
            [ -z "$lib" ] && continue
            echo "Instalando lib: $lib"
            arduino-cli lib install "$lib"
          done

      - name: Descobrir sketches (.ino)
        id: list_sketches
        shell: bash
        run: |
          IFS=',' read -ra GLOBS <<< "${SKETCHES_GLOB}"
          files=()
          for g in "${GLOBS[@]}"; do
            while IFS= read -r -d '' f; do
              files+=("$f")
            done < <(find . -path "./.git" -prune -o -type f -name "${g// /}" -print0)
          done
          if [ ${#files[@]} -eq 0 ]; then
            echo "Nenhum .ino encontrado pelos globs: ${SKETCHES_GLOB}"
            exit 1
          fi
          printf '%s\n' "${files[@]}" | sed 's|^\./||' | sort -u > /tmp/sketches.txt
          echo "sketch_count=$(wc -l < /tmp/sketches.txt | tr -d ' ')" >> $GITHUB_OUTPUT
          echo "sketches=$(paste -sd ',' /tmp/sketches.txt)" >> $GITHUB_OUTPUT
          echo "Sketches:"
          cat /tmp/sketches.txt

      - name: Criar matriz dinâmica (sketch × FQBN)
        id: matrix
        run: |
          python3 - << 'PY'
import os, json
sketches = os.environ.get('SKETCHES','').split(',')
if not sketches or sketches == ['']:
  with open('/tmp/sketches.txt') as f:
    sketches = [l.strip() for l in f if l.strip()]
fqbn = json.loads("""${{ inputs.fqbn_json }}""")
matrix = [{"sketch": s, "fqbn": b} for s in sketches for b in fqbn]
print("::set-output name=data::" + json.dumps({"include": matrix}))
PY

      - name: Compilar matriz
        uses: actions/github-script@v7
        with:
          script: |
            const matrix = JSON.parse(core.getInput('data', { required: true }))
            core.setOutput('include', matrix.include)
          result-encoding: string
        id: out
        env:
          data: ${{ steps.matrix.outputs.data }}

  compile:
    needs: build
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.build.outputs['out.include']) }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Instalar arduino-cli
        uses: arduino/setup-arduino-cli@v2

      - name: Core summary
        run: |
          echo "Sketch: ${{ matrix.sketch }}"
          echo "FQBN:   ${{ matrix.fqbn }}"

      - name: Compilar
        run: |
          arduino-cli compile \
            --fqbn "${{ matrix.fqbn }}" \
            --build-property compiler.cpp.extra_flags="${EXTRA_BUILD_FLAGS}" \
            --export-binaries \
            "$(dirname "${{ matrix.sketch }}")"

      - name: Publicar artefatos (.bin)
        uses: actions/upload-artifact@v4
        with:
          name: firmware-${{ matrix.fqbn }}-$(basename ${{ matrix.sketch }} .ino)
          path: |
            $(dirname ${{ matrix.sketch }})/build/*/*.bin
            $(dirname ${{ matrix.sketch }})/build/*/*.elf
          if-no-files-found: warn
